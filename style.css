/* 
p {
    color: green;
}



The structure of the CSS file is as follows:

selector {
    property1: value1;
    property2: value2;
    property3: value3;
}

The selector is which element you want to style. The property is the CSS property 
you want to style. The value is the value of the property. We can also select multiple 
elements by using a comma separated list of selectors.

Property is for example color, background-color, font-size, etc. Value is the value 
we want to set the property to.

*/

/* 
What type of selectors are there?

There are the following types of selectors: 

    * Universal Selector
    * Tag Selector
    * Class Selector
    * ID Selector
    * Attribute Selector
    * Pseudo-class Selector
    * Pseudo-element Selector
    * Combined Selector

*/

/* This is a universal selector which selects all elements. */

/* * {
    color: black;
} */

/* This is a tag selector which selects a specific element. 

h2 {
    color: red;
} 

*/

/* This is a class selector which selects all elements with a specific class. 

.red-h1 {
    color: red;
}

.black-h1 {
    color: black;
}

*/

/* This is an ID selector which selects all elements with a specific ID. With a tag 
we select all the same elements. With the ID selector only the element with that 
specific ID. We should never use the same id for multiple elements. We can use class 
instead for that purpose 

#abc {
    color: red;
}

*/

/* This is an attribute selector which selects all elements with a specific attribute.  */
/* 
[drink] {
    color: blue;
} 


[drink="beer"] {
    color: blue;
}
*/

/* This is a pseudo-class selector which selects all elements with a specific pseudo-class.  

h1:hover {
    color: blue;
}

*/

/* This is a pseudo-element selector which selects all elements with a specific pseudo-element.  

An example of a pseudo-element selector is ::before. This is a pseudo-element selector


h1::first-letter {
    color: red;
}



/* This is a combined selector which selects all elements with a specific class and a specific attribute.  

There are four different combinators in CSS:

descendant selector (space)
child selector (>)
adjacent sibling selector (+)
general sibling selector (~)



h1 p {
    color: red;
}


h1 > p {
    color: blue;
}


h1 + h1 {
    background-color: blue;
}


h1 ~ h1 {
    color: red;
}
*/

/* Specificity is an algorithm that calculates the weight 
that is applied to a given CSS declaration.   */

/* The hierarchy of specificity is the following, each group of selectors has the same weight:

FIRST GROUP
!important 

SECOND GROUP
inline style

THIRD GROUP
ID selector

FOURTH GROUP
Class selector
pseudo-class selector
attribute selector

FIFTH GROUP
tag selector
pseudo-element selector

h1 {
    color: red;
}

h1 {
    color: blue;
}

Bottomline: the more specific the selector, the higher the weight.
When you select two elements with the same specificity group, the one that is
 last in the CSS file will be used.


h1 {
    color: red !important;
}
*/

/* 
What is BEM? BEM is a front-end naming method for organizing and naming CSS classes. 
The Block, Element, Modifier methodology is a popular naming convention for class 
names in HTML and CSS. It helps to write clean CSS by following some simple rules.

There are three main parts of BEM.

Block which holds everything (elements) inside and acts as a scope.

Element which acts as a specific part of the component.

Modifier which adds additional styles to a specific element(s).



.subscribe__input:first-child {
    background-color: blue;
    color: orange;

}
.subscribe__input:last-child {
    background-color: beige;
    color: blueviolet;
}
.subscribe__input--active {
    background-color: orange;
    color: blue;
}

BEM is one the the most known naming conventions for CSS classes. 
It is a way to organize and name CSS classes.

*/

/*

There are two types of measurements in CSS: fixed and relative.

Examples of fixed measurements are:
pixels (px), meters (m), centimeters (cm), and millimeters (mm).

Examples of relative measurements are:
percentage (%), em (em), ex (ex), and rem (rem).



.subscribe__div-p {
    font-size: 15mm;
}
.subscribe__div-p {
    font-size: 15pp;
}
*/



/*
We should avoid using fixed measurements in CSS if we want to create a responsive website.

Relative measurements are for example rem and em. 
By default, the font-size of the root element is set to 16px.


.subscribe {
    font-size: 5px;
}
.subscribe__div-p {
    font-size: 3em;
}



When we change any of the measurements of for example padding, margin or anything else,
the child elements will inherit that value as 1 em and the browser will recalculate 
the default size for 1 em for all the elements.

*/

/* * {
    padding: 0;
    margin: 0;
} */

/* .subscribe {
    background-color: aqua;
    width: 50vw;
    height: 50vh;
} */
/* .subscribe {
    background-color: aqua;
    width: 50%;
    height: 50%;
} 
*/
/* .subscribe {
    font-size: 10px;
}
.subscribe__div-p {
    font-size: 3em;
    font-family: 'Open Sans', sans-serif;
    line-height: 2;
    font-weight: 1000;
    font-variant: small-caps;
}

.subscribe__div-p:first-child {
    background-color: orange;
    
}
.subscribe__div-p:last-child {
    background-color: aqua;
} */

/*

Font-size is obviously the size of the text. Font-family is the font family of the text or which 
font to use. 

Line-height is the height of the text. The line-height originates from the center of
a letter in y axis. A line-height of 1 means 0.5 space towards the the upper and 0.5 towards the 
downside. 

Font-weight is the weight of the text, for example bold. 

Font-variant is the variant of the text, for example small-caps. 

We can find a variety of font-family options in Google Fonts. We separate the font-family names by a comma
because if we can't find the first one, it will default to the second one after the comma. 



body {
    
    font-family: 'Alumni Sans Pinstripe', sans-serif;
}

*/

/*

The browser will by default set the padding and margin to a certain value if we don't specify it. We can use
normalize to reset all these values. 

We can Google normalize and find it very easily. 

*/


/*

There are only two types of boxes in CSS: inline and block.

The width of block elements is the the total width of their parent elements.
The element that follows a block element will go below it.

The width of inline elements is the width of the content inside them.
The element that follows an inline element will go to the right of it if there is enough space.

You can change the type property of an element to make it inline or block.
You use the display property to make an element inline or block.

*/

h1, h2, h3 {
    display: inline;
}